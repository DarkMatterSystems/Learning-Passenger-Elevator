
    Matrix Model Simulator - Learning Edition - Version 1.0.0
    Development on THU-02-JAN-2014 @ 12:15:19
    Copyright (C) 2014, Dark Matter Systems Ltd.  All rights reserved.

    Connection established: MATRIX*CORE - Version 0.5.2

$
$ | Passenger Elevator Scenario - Passenger Travels from First to Fifth Floor
$
$ | On each floor a control panel is set into the wall by the elevator doors.  A
$ | floor control panel has a call button.
$ |
$ | Inside the car there is another control panel containing seven floor request
$ | buttons plus a open door button and a close door button.
$ |
$ | Normally, both control panels are handled by a Controls service domain that
$ | supplies the following events:
$ |
$ |    |     Source: Floor Passenger
$ |    Floor : Request_service
$ |    |
$ |    |     Source: Car Passenger
$ |    Car      : Open_door
$ |    Car      : Close_door
$ |    Car_Stop : Go_to_floor
$ |
$ | Also, a Machinery service domain supplies the following car and door sensor
$ | events:
$ |
$ |    |     Source: Door Sensors
$ |    Door : Open_completed
$ |    Door : Obstruction
$ |    Door : Clear
$ |    Door : Close_completed
$ |    |
$ |    |     Source: Car Sensors
$ |    Car : Moving
$ |    Car : Floor_approaching
$ |    Car : Car_stopped
$ |
$ | In this simulation, they are supplied by the developer.
$ |
$ | The events are specified in the model under the EventContext statement.
$ |
$ | A Matrix model acts on the Real World by issuing events to actuators via
$ | service domains.  In the Passenger Elevator model, exported events are
$ | directed to the Machinery domain and are indicated by an
$ | "EVENT -> Machinery::" prefix.
$
$
$ | Initialise System
$ | -----------------
$
$ | At the start of the simulation, all elevators are at the first floor
$ | and there are no requests for service pending.
$
$ trace all on
$ trace display on
$ trace events on
$ trace states on
$
$ initialise all
$
$ display all

Floor:
    Identity  Status  Number
    ~~~~~~~~  ~~~~~~  ~~~~~~
           1  Idle         1
           2  Idle         2
           3  Idle         3
           4  Idle         4
           5  Idle         5
           6  Idle         6
           7  Idle         7

Door:
    Identity  Status
    ~~~~~~~~  ~~~~~~
           1  Closed
           2  Closed
           3  Closed

Car_Service:
    Identity
    ~~~~~~~~
           1
           2
           3
           4
           5
           6
           7
           8
           9
          10
          11
          12
          13
          14
          15
          16
          17
          18
          19
          20
          21

Car_Stop:
    Identity  Status
    ~~~~~~~~  ~~~~~~~~~~~~~~
           1  Awaiting_Floor
           2  Awaiting_Floor
           3  Awaiting_Floor

Service_Assigner:
    Identity  Status
    ~~~~~~~~  ~~~~~~
           1  Idle

Car:
    Identity  Status      Direction
    ~~~~~~~~  ~~~~~~~~~~  ~~~~~~~~~
           1  Stationary  UP
           2  Stationary  UP
           3  Stationary  UP

$
$
$ | Passenger Calls Elevator
$ | ------------------------
$
$ | All elevators at the first floor.  A passenger at the first floor wishes
$ | to up to fifth floor.
$
$ | Passenger at the first floor calls the elevator by presing the call button.
$ create event identity Elevator_Management Floor Request_service 1

EVENT (0:0) - Floor[1] Request_service ()

STATE (73:42) - Floor[1] Calling_Service {Request_service -> Idle} ()

EVENT (87:61) - Floor[1] Service_called ()

EVENT (88:75) - Service_Assigner[1] Assign_car (Floor_number:1)

STATE (64:42) - Floor[1] Idle {Service_called -> Calling_Service} ()

STATE (297:46) - Service_Assigner[1] Allocating_Car {Assign_car -> Idle} (Floor_number:1)

EVENT (388:117) - Car[1] Service_requested ()

EVENT (443:41) - Service_Assigner[1] Car_assigned ()

STATE (288:42) - Service_Assigner[1] Idle {Car_assigned -> Allocating_Car} ()

STATE (510:42) - Car[1] Selecting_Schedule {Service_requested -> Stationary} ()

EVENT (553:81) - Car[1] Service_current_floor ()

STATE (913:42) - Car[1] Opening {Service_current_floor -> Selecting_Schedule} ()

EVENT (920:49) - Door[1] Open ()

STATE (128:42) - Door[1] Opening {Open -> Closed} ()

EVENT -> Machinery::Door_Opening

$
$ | Event generated by door sensor.
$ create event identity Elevator_Management Door Open_completed 1

EVENT (0:0) - Door[1] Open_completed ()

STATE (146:42) - Door[1] Open {Open_completed -> Opening} ()

EVENT (153:49) - Car[1] Door_open ()

STATE (940:42) - Car[1] Accessible {Door_open -> Opening} ()

$
$
$ | Passenger Enters Elevator
$ | -------------------------
$
$ | Passenger in car presses the fifth floor button.
$ create event identity Elevator_Management Car_Stop Go_to_floor 1 5

EVENT (0:0) - Car_Stop[1] Go_to_floor (Desired_floor_number:5)

STATE (218:46) - Car_Stop[1] Awaiting_Floor {Go_to_floor -> Awaiting_Floor} (Desired_floor_number:5)

EVENT (270:69) - Car[1] Service_requested ()

$
$ | Event generated as external timer event.
$ create event identity Elevator_Management Car Close_door 1

EVENT (0:0) - Car[1] Close_door ()

STATE (1014:42) - Car[1] Closing {Close_door -> Accessible} ()

EVENT (1021:49) - Door[1] Close ()

STATE (167:42) - Door[1] Closing {Close -> Open} ()

EVENT -> Machinery::Door_Closing

$
$ | Event generated by door sensor.
$ create event identity Elevator_Management Door Close_completed 1

EVENT (0:0) - Door[1] Close_completed ()

STATE (107:42) - Door[1] Closed {Close_completed -> Closing} ()

EVENT (114:49) - Car[1] Door_closed ()

STATE (470:42) - Car[1] Stationary {Door_closed -> Closing} ()

EVENT (482:53) - Car[1] Service_requested ()

STATE (510:42) - Car[1] Selecting_Schedule {Service_requested -> Stationary} ()

EVENT (566:85) - Car[1] Service_schedule ()

STATE (692:42) - Car[1] Servicing_Schedule {Service_schedule -> Selecting_Schedule} ()

EVENT -> Machinery::Car.Moving (Direction:UP)

$
$
$ | Elevator Starts Ascent
$ | ----------------------
$
$ | Event generated by car sensor.
$ create event identity Elevator_Management Car Moving 1

EVENT (0:0) - Car[1] Moving ()

STATE (732:42) - Car[1] Moving {Moving -> Servicing_Schedule} ()

$
$ | Events generated by car sensor as it moves.
$ create event identity Elevator_Management Car Floor_approaching 1 2

EVENT (0:0) - Car[1] Floor_approaching (Next_floor_number:2)

STATE (752:46) - Car[1] Checking_Schedule {Floor_approaching -> Moving} (Next_floor_number:2)

EVENT (830:97) - Car[1] Continue ()

STATE (732:42) - Car[1] Moving {Continue -> Checking_Schedule} ()

$ create event identity Elevator_Management Car Floor_approaching 1 3

EVENT (0:0) - Car[1] Floor_approaching (Next_floor_number:3)

STATE (752:46) - Car[1] Checking_Schedule {Floor_approaching -> Moving} (Next_floor_number:3)

EVENT (830:97) - Car[1] Continue ()

STATE (732:42) - Car[1] Moving {Continue -> Checking_Schedule} ()

$ create event identity Elevator_Management Car Floor_approaching 1 4

EVENT (0:0) - Car[1] Floor_approaching (Next_floor_number:4)

STATE (752:46) - Car[1] Checking_Schedule {Floor_approaching -> Moving} (Next_floor_number:4)

EVENT (830:97) - Car[1] Continue ()

STATE (732:42) - Car[1] Moving {Continue -> Checking_Schedule} ()

$ create event identity Elevator_Management Car Floor_approaching 1 5

EVENT (0:0) - Car[1] Floor_approaching (Next_floor_number:5)

STATE (752:46) - Car[1] Checking_Schedule {Floor_approaching -> Moving} (Next_floor_number:5)

EVENT (816:93) - Car[1] Stop_at_next_floor ()

STATE (889:42) - Car[1] Slowing {Stop_at_next_floor -> Checking_Schedule} ()

EVENT -> Machinery::Car.Slowing ()

$
$ | Event generated by car sensor.
$ create event identity Elevator_Management Car Car_stopped 1

EVENT (0:0) - Car[1] Car_stopped ()

STATE (913:42) - Car[1] Opening {Car_stopped -> Slowing} ()

EVENT (920:49) - Door[1] Open ()

STATE (128:42) - Door[1] Opening {Open -> Closed} ()

EVENT -> Machinery::Door_Opening

$
$ | Event generated by door sensor.
$ create event identity Elevator_Management Door Open_completed 1

EVENT (0:0) - Door[1] Open_completed ()

STATE (146:42) - Door[1] Open {Open_completed -> Opening} ()

EVENT (153:49) - Car[1] Door_open ()

STATE (940:42) - Car[1] Accessible {Door_open -> Opening} ()

$
$ display entity Elevator_Management Car

Car:
    Identity  Status      Direction
    ~~~~~~~~  ~~~~~~~~~~  ~~~~~~~~~
           1  Accessible  UP
           2  Stationary  UP
           3  Stationary  UP

$ display entity Elevator_Management Door

Door:
    Identity  Status
    ~~~~~~~~  ~~~~~~
           1  Open
           2  Closed
           3  Closed

$
$
$ | Passenger Exits Elevator
$ | ------------------------
$
$ | Event generated as external timer event.
$ create event identity Elevator_Management Car Close_door 1

EVENT (0:0) - Car[1] Close_door ()

STATE (1014:42) - Car[1] Closing {Close_door -> Accessible} ()

EVENT (1021:49) - Door[1] Close ()

STATE (167:42) - Door[1] Closing {Close -> Open} ()

EVENT -> Machinery::Door_Closing

$
$ | Event generated by door sensor.
$ create event identity Elevator_Management Door Close_completed 1

EVENT (0:0) - Door[1] Close_completed ()

STATE (107:42) - Door[1] Closed {Close_completed -> Closing} ()

EVENT (114:49) - Car[1] Door_closed ()

STATE (470:42) - Car[1] Stationary {Door_closed -> Closing} ()

$
$
$ host pause
Press any key to continue . . .
$
$ exit

        Model Simulation Elapsed Time: 00:00:01

    Disconnected from MATRIX*CORE on THU-02-JAN-2014 @ 12:15:20
